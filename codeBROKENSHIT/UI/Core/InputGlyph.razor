@using Sandbox;
@using Sandbox.UI;
@using GoblinGame.UI.Core;

@namespace GoblinGame
@inherits Panel

<style>
	InputGlyph {
		backdrop-filter: blur(5px);
		background-color: #2c2825cc;
		box-shadow: 0px 0px 25px #00000096;
		height: 48px;
		flex-direction: row;
		padding: 5px;
		border: 2px #2c2825cc;

		.img {
			background-size: contain;
			background-position: center;
			background-repeat: no-repeat;
			background-image-tint: lighten(#2c2825cc, 4);
			margin-right: 5px;
		}
		
		.text {
			top: 2px;

			.shadow {
				position: absolute;
				margin-left: 3px;
				margin-top: 3px;
			}
		}
	}
</style>

<root>
	<image class="img" @ref=img />

	<panel class="text">
		@{
			<WiggleText Scale="@(0.22f)" Tint=@Color.Black class="shadow" Value="@(Text)" />
			<WiggleText Scale="@(0.22f)" Value="@(Text)" />
		}
	</panel>
</root>

@code {
	public string Text { get; set; }

	public InputButton Button
	{
		get => button;
		set
		{
			button = value;
			shouldUpdate = true;
		}
	}

	TimeUntil nextWobble;
	Image img;

	bool shouldUpdate = false;
	InputButton button;

	public override void Tick()
	{
		if ( img != null && shouldUpdate )
		{
			var texture = Input.GetGlyph( Button, InputGlyphSize.Small, GlyphStyle.Light.WithSolidABXY() );
			img.Style.Width = texture.Width;
			img.Style.Height = texture.Height;
			img.Style.BackgroundImage = texture;

			shouldUpdate = false;
		}

		if ( !nextWobble )
			return;

		nextWobble = Game.Random.Float( 0.5f, 1f );
		Style.Set( "transform", $"rotate({Game.Random.Int( -3, 3 )})" );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Text );
	}
}
