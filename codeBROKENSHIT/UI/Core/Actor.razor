@using GoblinGame.UI.Core
@using Sandbox.UI;
@namespace GoblinGame.UI
@inherits Panel

@code {

	private Vector2? _position;

	public bool ReadyToPosition { get; private set; }

	private bool _shouldUpdate;

	internal Vector2 Offset;

	private PanelCamera _panelCamera;

	public PanelCamera PanelCamera
	{
		get => _panelCamera;
		set
		{
			if ( _panelCamera == value ) return;
			_panelCamera?.Unregister( this );
			_panelCamera = value;
			_panelCamera?.Register( this );
		}
	}

	public Vector2 Size => Box.Rect.Size * ScaleFromScreen;

	private Queue<Action> _postReadyQueue = new();

	public Actor( PanelCamera camera )
	{
		_panelCamera = camera;
		camera.Register( this );
	}

	public Actor()
	{
	}

	public void QueuePosition( Action action )
	{
		if ( ReadyToPosition )
		{
			action.Invoke();
			return;
		}
		_postReadyQueue.Enqueue( action );
	}

	public Vector2 Position
	{
		get
		{
			if ( !ReadyToPosition )
			{
				Log.Warning( $"Tried to position {this} before it was ready" );
				return Vector2.Zero;
			}
			_position ??= GetInitialPosition();
			return _position.Value;
		}

		set
		{
			_position = value;
			PositionHasChanged();
		}
	}

	public Rect Rect => new( Position, Size );

	private Vector2 GetInitialPosition()
	{
		var position = new Vector2
		{
			x = (Box.Rect.Left - Parent.Box.Rect.Left) * ScaleFromScreen,
			y = (Box.Rect.Top - Parent.Box.Rect.Top) * ScaleFromScreen
		};
		return ModifyInitialPosition( position );
	}

	protected virtual Vector2 ModifyInitialPosition( Vector2 position ) => position;

	protected virtual float WobbleAmount => 2.0f;
	protected virtual float WobbleDelay => 0.50f;

	private RealTimeUntil _nextWobble = 0.60f;
	private Vector2 _wobbleOffset = Vector2.Zero;

	protected virtual Vector2 DoPositionEffect( Vector2 position ) => position + _wobbleOffset;

	public void PositionHasChanged() => _shouldUpdate = true;

	public override void Tick()
	{
		base.Tick();

		Style.Position = PositionMode.Absolute;

		Style.Opacity = !ReadyToPosition ? 0 : 1;

		if ( ReadyToPosition )
		{
			if ( _nextWobble )
			{
				_wobbleOffset = Vector2.Random * WobbleAmount;
				_nextWobble = WobbleDelay;
				PositionHasChanged();
			}

			if ( _shouldUpdate )
			{
				var position = Position;
				position = DoPositionEffect( position );
				position -= PanelCamera?.Position ?? Vector2.Zero;
				Style.Left = Length.Pixels( position.x.Floor() );
				Style.Top = Length.Pixels( position.y.Floor() );

				StateHasChanged();
			}
		}

		if ( ReadyToPosition ) return;

		if ( Box.Rect is { Width: 0, Height: 0 } ) return;

		_position ??= GetInitialPosition();
		PositionHasChanged();

		ReadyToPosition = true;

		foreach ( var action in _postReadyQueue )
		{
			action.Invoke();
		}
		_postReadyQueue = null;
	}

}
