@using Sandbox.UI;
@using GoblinGame.UI.Core;
@using System.Globalization;

@namespace GoblinGame
@inherits Panel

<style>
    ResourcePanel { 
        position: relative;
        background-color: #2c2825cc;
        box-shadow: 0px 0px 45px #00000096;
        margin: 5px;
        width: 96px;
        height: 96px;
        backdrop-filter: blur(8px);
		border: 4px #2c2825cc;
    }
    
	.text {
		position: absolute;
		bottom: -10px;
		right: -20px;
		padding: 5px;
		height: 35px;
		flex-shrink: 0;
		transform-origin: center;

		.shadow {
			position: absolute;
			margin-left: 8px;
			margin-top: 8px;
		}
	}

    img {
        top: 50%;
        left: 50%;
        width: 78px;
        height: 78px;
        transform: translate(-50% -50%);
    }
</style>

<root>
    <img src=@($"ui/resources/{ResourceName.ToLower()}.png") />
	<panel class="text">
        @{
			var result = formatNumber( ResourceAmount );

			<WiggleText Scale="@(0.32f)" Tint=@Color.Black class="shadow" Value="@(result)" />
			<WiggleText Scale="@(0.32f)" Value="@(result)" />
		}
	</panel>
</root>

@code {
	public string ResourceName { get; set; }
	public int ResourceAmount
	{
		get => resourceAmount;
		set
		{
			resourceAmount = value;
			DeleteChildren( true );
			StateHasChanged();
		}
	}

	int resourceAmount;
    TimeUntil nextWobble;

	private enum Suffix
    {
        None, 
        K, // Thousands
        M, // Millions
        B  // Billions
    }

    private static string formatNumber( long value )
    {
        var result = value.ToString();

		foreach ( var suffix in Enum.GetValues( typeof( Suffix ) ) )
		{
			var pow = Math.Pow( 10, (int)suffix * 3 );
			var suff = (int)suffix == 0
				? string.Empty
				: Enum.GetName( typeof( Suffix ), (int)suffix );

			if ( value >= pow )
			{
				var floored = Math.Floor( value / pow );
				var number = $"{floored:N0}";
				result = number
					+ (number.Length < 2 && value > 10 ? $",{(Math.Floor( value / pow * 10 ) - floored * 10):N0}" : string.Empty)
					+ suff;
			}
			else
				return result;
		}

		return result;
	}

	public override void Tick()
	{
		if ( !nextWobble )
			return;

		nextWobble = Game.Random.Float( 0.5f, 1f );
		Style.Set( "transform", $"rotate({Game.Random.Int( -3, 3 )})" );
	}
}
