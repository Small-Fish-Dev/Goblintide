@using Sandbox;
@using Sandbox.UI;
@using GoblinGame.UI.Core;

@namespace GoblinGame
@inherits Panel

<style>
	VillageHUD {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 100%;
		height: 100%;
		color: white;
		font-family: PatrickHand;

		.structures {
			position: absolute;
			width: 100%;
			flex-direction: row;
			height: 80px;
			background-color: darken(#2c2825cc, 0.5);
			box-shadow: 0px 0px 45px #00000096;
			border-top: 4px #2c2825cc;
			bottom: 0px;
			transform: translateY(0%);
			justify-content: center;
			transition: transform 0.5s ease-in-out;

			.slot {
				width: 100px;
				aspect-ratio: 1;
				margin-right: 50px;
				margin-left: 50px;
				bottom: 50%;
				backdrop-filter: blur(5px);
				background-color: #2c2825cc;
				box-shadow: 0px 0px 45px #00000096;
				transform: translateX(-50%) rotate(-2deg);
				transition: width 0.25s ease-in, bottom 0.25s ease-in, transform 0.2s ease-in-out, border 0.2s ease-in-out;
				border: 4px #2c2825cc;
				pointer-events: auto;

				&:hover {
					width: 140px;
					bottom: 80px;
					border: 4px rgba(white, 0.5);
				}

				.title {
					left: 50%;
					top: -45px;
					background-color: #2c2825cc;
					box-shadow: 0px 0px 45px #00000096;
					transform: translateX(-50%) rotate(-2deg);
					transition: transform 0.2s ease-in-out;
					padding: 5px;
					height: 35px;
					flex-shrink: 0;
					transform-origin: center;
				}

				.shadow {
					position: absolute;
					margin-left: 8px;
					margin-top: 8px;
				}
				
				.icon {
					position: absolute;
					width: 100%;
					height: 100%;
					background-size: 100%;
					background-position: center;
				}

				z-index: 3;
			}

			&.hidden {
				transform: translateY(250%);
			}
		}

		.information {
			position: absolute;
			left: 50%;
			top: 50%;
			flex-direction: column;
			flex-wrap: wrap;
			align-items: flex-start;
			z-index: 2;
			transition: opacity 0.3s ease-in-out;

			&:intro {
				opacity: 0;
			}

			&:outro {
				opacity: 0;
			}

			.title {
				padding: 5px;
				height: 38px;
				flex-shrink: 0;
				transform-origin: center;
				background-color: #2c2825cc;
				box-shadow: 0px 0px 45px #00000096;
				border: 2px #2c2825cc;
				flex-grow: 0;

				.shadow {
					position: absolute;
					margin-left: 8px;
					margin-top: 8px;
				}
			}

			.materials {
				margin-top: 5px;
				flex-direction: column;
				background-color: #2c2825cc;
				box-shadow: 0px 0px 45px #00000096;
				border: 2px #2c2825cc;
				padding: 5px;

				.material {
					flex-direction: row;

					.icon {
						width: 32px;
						aspect-ratio: 1;
						background-size: 100%;
						background-repeat: no-repeat;
						background-position: center;
						padding-right: 5px;
						right: 3px;
					}

					.shadow {
						position: absolute;
						margin-left: 34px;
						margin-top: 2px;
					}
				}
			}
			
			.inputHints {
				margin-top: 5px;
				flex-direction: row;

				.margin {
					margin-left: 10px;
				}
			}
		}
	}
</style>

<root>
	<panel class="structures" @ref=structureContainer >
		@{
			var structures = ResourceLibrary.GetAll<Prefab>()
				.Where( p => p?.Root?.Class == "BaseStructure" );
			foreach ( var structure in structures )
			{
				var root = structure.Root;
				var name = root.GetValue<string>( "Title" );

				<panel class="slot" style="transform: rotate(@(Game.Random.Int( -3, 3)))" @onclick=@(() => startBuilding( structure ))>
					<panel class="title" style="transform: translateX(-50%) rotate(@(Game.Random.Int( -3, 3)))">
						<WiggleText Scale="@(0.22f)" class="shadow" Tint=@Color.Black Value="@(name)" />
						<WiggleText Scale="@(0.22f)" Value="@(name)" />
					</panel>
					<PrefabIcon class="icon" Prefab="@structure" />
				</panel>
			}
		}
	</panel>
</root>

@code {
	Panel structureContainer;

	Prefab structurePrefab;
	SceneObject? buildObject;
	Panel informationPanel;
	TimeUntil nextWobble;

	[Event.Hotload]
	private void hotload()
	{
		if ( !Game.IsClient )
			return;

		buildObject?.Delete();
		buildObject = null;

		informationPanel?.Delete( true );
	}

	private void startBuilding( Prefab structure )
	{
		informationPanel?.Delete();
		buildObject?.Delete();

		var root = structure.Root;
		var name = root.GetValue<string>( "Model" );

		buildObject = new SceneObject( Game.SceneWorld, name );
		buildObject.SetMaterialOverride( Material.Load( "materials/building/building_transparent.vmat" ) );
		buildObject.Attributes.Set( "color", Color.Red );
		structurePrefab = structure;

		createInformationPanel( structure );
	}

	private void createInformationPanel( Prefab structure )
	{
		var root = structure.Root;
		var title = root.GetValue<string>( "Title" );

		informationPanel = AddChild<Panel>( "information" );

		// Title
		var titlePanel = informationPanel.AddChild<Panel>( "title" );
		var shadow = titlePanel.AddChild<WiggleText>( "shadow" );
		shadow.Scale = 0.22f;
		shadow.Tint = Color.Black;
		shadow.Value = title;

		var text = titlePanel.AddChild<WiggleText>();
		text.Scale = 0.22f;
		text.Value = title;

		// Inputs
		var inputHints = informationPanel.AddChild<Panel>( "inputHints" );
		var placeButton = inputHints.AddChild<InputGlyph>();
		placeButton.Button = InputButton.PrimaryAttack;
		placeButton.Text = $"Place";

		var cancelButton = inputHints.AddChild<InputGlyph>( "margin" );
		cancelButton.Button = InputButton.Zoom;
		cancelButton.Text = $"Cancel";

		// Materials
		var materials = informationPanel.AddChild<Panel>( "materials" );
		var targets = new[] { 
			("Wood", Goblintide.TotalWood), 
			("Women", Goblintide.TotalWomen), 
			("Food", Goblintide.TotalFood) };
		foreach ( var target in targets )
		{
			var materialName = target.Item1;
			var totalAmount = target.Item2;

			var value = root.GetValue<int>( materialName );
			if ( value <= 0 ) 
				continue;

			var path = $"ui/resources/{materialName.ToLower()}.png";
			var container = materials.AddChild<Panel>( "material" );

			var image = container.AddChild<Image>( "icon" );
			image.Style.SetBackgroundImage( path );

			var valueShadow = container.AddChild<WiggleText>( "shadow" );
			valueShadow.Scale = 0.22f;
			valueShadow.Tint = Color.Black;
			valueShadow.Value = value.ToString();

			var valueText = container.AddChild<WiggleText>();
			valueText.Scale = 0.22f;
			valueText.Value = value.ToString();
			valueText.Tint = totalAmount < value
				? Color.Red
				: Color.White;
		}
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		base.OnButtonEvent( e );

		if ( e.Pressed )
			return;

		if ( e.Button == "mouseleft" )
		{
			if ( buildObject != null && structurePrefab != null && !structureContainer.HasHovered )
			{
				BaseStructure.RequestBuild( structurePrefab.ResourceName, buildObject.Bounds.Mins, buildObject.Bounds.Maxs );
				buildObject?.Delete();
				buildObject = null;

				informationPanel?.Delete();
			}
		}
		else if ( e.Button == "mousemiddle" )
		{
			if ( buildObject != null )
			{
				buildObject?.Delete();
				buildObject = null;

				informationPanel?.Delete();
			}
		}
	}

	public override void Tick()
	{
		if ( Game.LocalPawn is not Lord pawn )
			return;

		structureContainer?.SetClass( "hidden", !pawn.Overview );

		if ( buildObject != null && buildObject.IsValid() )
		{
			if ( !pawn.Overview )
			{
				buildObject.Delete();
				buildObject = null;

				informationPanel?.Delete( true );

				return;
			}

			var dir = Screen.GetDirection( Mouse.Position );
			var ray = new Ray( Camera.Position, dir );

			var trace = Trace.Ray( ray, 10000f)
				.WorldOnly()
				.Run();

			var town = Goblintide.CurrentTown;
			if ( town == null )
				return;

			var difference = (trace.HitPosition - town.Position);
			var targetPosition = (town.Position + difference.Normal * Math.Clamp(difference.Length, -town.TownRadius, town.TownRadius))
				.WithZ( town.Position.z );

			if ( informationPanel != null )
			{
				if ( nextWobble && !informationPanel.IsDeleting )
				{
					nextWobble = Game.Random.Float( 0.5f, 1.75f );
					informationPanel.Style.Set( "transform", $"rotate({Game.Random.Int( -3, 3 )})" );
				}

				var position = buildObject.Bounds.Mins.WithX( buildObject.Bounds.Maxs.x ).ToScreen();
				informationPanel.Style.Left = Length.Fraction( position.x + 0.01f );
				informationPanel.Style.Top = Length.Fraction( position.y );
			}

			buildObject.Position = Vector3.Lerp( buildObject.Position, targetPosition, 10f * Time.Delta );
			buildObject.Rotation = Rotation.LookAt( buildObject.Position - town.Position );

			var boundsTrace = Trace.Box( buildObject.Bounds, Vector3.Zero, Vector3.Zero )
				.WithTag( "structure" )
				.Run();

			var canBuild = boundsTrace.Entity is null 
				&& Goblintide.TotalWood >= structurePrefab.Root.GetValue<int>( "Wood" )
				&& Goblintide.TotalWomen >= structurePrefab.Root.GetValue<int>("Women")
				&& Goblintide.TotalFood >= structurePrefab.Root.GetValue<int>( "Food" );

			var color = canBuild
				? Color.White
				: Color.Red;
			buildObject.Attributes.Set( "color", color );
			DebugOverlay.Box( buildObject.Bounds.Mins, buildObject.Bounds.Maxs, color );
		}
	}
}
